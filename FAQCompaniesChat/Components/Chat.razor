@using FAQCompaniesChat.Services
@using FAQCompaniesChat.Data

@inject IJSRuntime JSRuntime
@inject ChatService ChatService

<div id="scrollbox">
    @foreach (var item in _messages)
    {
        if (item.IsRequest) 
        {
            <div class="sent p-2 m-0 position-relative d-flex justify-content-end">
                <p class="">@item.Body</p>
            </div>
        }
        else 
        {
            <div class="received p-2 m-0 position-relative d-flex justify-content-start">
                <p class="">@item.Body</p>
            </div>
        }
    }
</div>
<hr />


<EditForm Model="chatinput" OnValidSubmit="SubmitChat">
<textarea id="chattextarea" @bind="@chatinput.Text" @oninput="@((ChangeEventArgs e) => UpdateTextArea(e))" />
    <div>
        <button class="btn btn-secondary" @onclick="@ClearChat">Clear Chat</button>
        <button class="btn btn-primary type="submit">Submit</button>
    </div>
</EditForm>

@code {

    private ChatInput chatinput = new();
    private List<Data.Message> _messages = new();
    private async Task ClearChat() => _messages = new List<Message>();
    private IJSObjectReference module;

    private async Task SubmitChat()
    {
        Message tosend = new Message(chatinput.Text, true);
        _messages.Add(tosend);

        Message response = await ChatService.GetResponse(_messages);
        _messages.Add(response);

        chatinput.Text = "";
    }


    private void UpdateTextArea(ChangeEventArgs e)
    {
        chatinput.Text = e.Value!.ToString()!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ChatService.InitConversation();
        }
    }

    public class ChatInput
    {
        public ChatInput()
        {
            Text = "";
        }
        public string Text { get; set; }
    }

}

